name: Gradle Build and Docker Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create properties files
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.SECRET_PROPERTIES }}" > src/main/resources/secret.properties
          echo "${{ secrets.SOUND_JSON }}" > src/main/resources/StableFurnaceProject1.json

      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=src/main/resources/StableFurnaceProject1.json" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t backend:latest .
          docker tag backend:latest popomance/backend:latest
          docker push popomance/backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo docker pull popomance/backend:latest
            sudo docker stop backend || true
            sudo docker rm backend || true
            sudo docker run -d -p 8080:8080 --name backend popomance/backend:latest
            sudo docker system prune -f -a

            # 컨테이너 로그 출력
            echo "=== Docker Container Logs ==="
            sudo docker logs --tail 50 backend

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": ":white_check_mark: 백엔드 배포가 성공적으로 완료되었습니다."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}


      # - name: Notify Slack - Failure
      #   if: failure()
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' --data '{
      #       "text": ":x: 백엔드 배포 중 오류가 발생했습니다."
      #     }' ${{ secrets.SLACK_WEBHOOK_URL }}
