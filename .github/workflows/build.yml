name: Gradle Build and EC2 Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create properties files
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.SECRET_PROPERTIES }}" > src/main/resources/secret.properties
          echo "${{ secrets.SOUND_JSON }}" > src/main/resources/StableFurnaceProject1.json

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Kill existing Java process if running
            pkill -f "java -jar"

            # Remove existing application files
            rm -rf ~/app

            # Create application directory
            mkdir -p ~/app

            # Copy new application files
            scp ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/actions-runner/_work/your-repo-name/your-repo-name/build/libs/*.jar ~/app/app.jar
            scp ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/actions-runner/_work/your-repo-name/your-repo-name/src/main/resources/StableFurnaceProject1.json ~/app/StableFurnaceProject1.json

            # Set environment variable
            export GOOGLE_APPLICATION_CREDENTIALS=~/app/StableFurnaceProject1.json

            # Start the application
            cd ~/app
            nohup java -jar app.jar > app.log 2>&1 &

            # Optional: Tail the logs to verify startup
            tail -n 50 app.log

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": ":white_check_mark: 백엔드 배포가 성공적으로 완료되었습니다."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
